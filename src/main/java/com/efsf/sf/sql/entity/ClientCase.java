package com.efsf.sf.sql.entity;
// Generated 2013-08-01 09:42:02 by Hibernate Tools 3.2.1.GA

import java.math.BigDecimal;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import org.hibernate.annotations.ForeignKey;

/**
 * ClientCase generated by hbm2java
 */
@Entity
@Table(name = "clientCase")
public class ClientCase implements java.io.Serializable {

    private Integer idClientCase;
    private Consultant consultant;
    private Client client;
    private CaseStatus caseStatus;
    private ProductType productType;
    private ProductDetails productDetails;
    private Date beginDate;
    private Date endDate;
    private Integer phase;
    private BigDecimal consolidationValue;
    private BigDecimal freeResourcesValue;
    private String goal;
    private BigDecimal expectedInstalment;
    private String note;
    private Integer viewCounter;
    private Integer difficulty;
    private Boolean premium;
    private CaseRating caseRating;
    private Set<Consultant> consultants = new HashSet<>(0);
    private Set<Consultant> consultants_1 = new HashSet<>(0);
    private Double interestRate;
    private Integer interestRateType;
    private Date receiveCreditDate;
    private Date beginPaymentDate;
    private Integer numberOfPayments;
    private List<Installment> installments;

    public ClientCase() {
    }

    @Id
    @GeneratedValue(strategy = IDENTITY)
    @Column(name = "id_clientCase")
    public Integer getIdClientCase() {
        return this.idClientCase;
    }

    public void setIdClientCase(Integer idClientCase) {
        this.idClientCase = idClientCase;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "fk_consultant")
    @ForeignKey(name = "clientCaseToConsultant")
    public Consultant getConsultant() {
        return this.consultant;
    }

    public void setConsultant(Consultant consultant) {
        this.consultant = consultant;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "fk_client", nullable = false)
    @ForeignKey(name = "clientCaseToClient")
    public Client getClient() {
        return this.client;
    }

    public void setClient(Client client) {
        this.client = client;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "fk_caseStatus", nullable = false, columnDefinition = "int default 1")
    @ForeignKey(name = "clientCaseToStatus")
    public CaseStatus getCaseStatus() {
        return this.caseStatus;
    }

    public void setCaseStatus(CaseStatus caseStatus) {
        this.caseStatus = caseStatus;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "fk_productType", nullable = false)
    @ForeignKey(name = "clientCaseToProductType")
    public ProductType getProductType() {
        return this.productType;
    }

    public void setProductType(ProductType productType) {
        this.productType = productType;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "fk_productDetails")
    @ForeignKey(name = "clientCaseToProductDetails")
    public ProductDetails getProductDetails() {
        return this.productDetails;
    }

    public void setProductDetails(ProductDetails productDetails) {
        this.productDetails = productDetails;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "beginDate", length = 19)
    public Date getBeginDate() {
        return this.beginDate;
    }

    public void setBeginDate(Date beginDate) {
        this.beginDate = beginDate;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "endDate", length = 19)
    public Date getEndDate() {
        return this.endDate;
    }

    public void setEndDate(Date endDate) {
        this.endDate = endDate;
    }

    @Column(name = "phase")
    public Integer getPhase() {
        return this.phase;
    }

    public void setPhase(Integer phase) {
        this.phase = phase;
    }

    @Column(name = "consolidationValue", precision = 12)
    public BigDecimal getConsolidationValue() {
        return this.consolidationValue;
    }

    public void setConsolidationValue(BigDecimal consolidationValue) {
        this.consolidationValue = consolidationValue;
    }

    @Column(name = "freeResourcesValue", precision = 12)
    public BigDecimal getFreeResourcesValue() {
        return this.freeResourcesValue;
    }

    public void setFreeResourcesValue(BigDecimal freeResourcesValue) {
        this.freeResourcesValue = freeResourcesValue;
    }

    @Column(name = "goal", length = 40)
    public String getGoal() {
        return this.goal;
    }

    public void setGoal(String goal) {
        this.goal = goal;
    }

    @Column(name = "expectedInstalment", precision = 8)
    public BigDecimal getExpectedInstalment() {
        return this.expectedInstalment;
    }

    public void setExpectedInstalment(BigDecimal expectedInstalment) {
        this.expectedInstalment = expectedInstalment;
    }

    @Column(name = "note", length = 65535)
    public String getNote() {
        return this.note;
    }

    public void setNote(String note) {
        this.note = note;
    }

    @Column(name = "viewCounter")
    public Integer getViewCounter() {
        return this.viewCounter;
    }

    public void setViewCounter(Integer viewCounter) {
        this.viewCounter = viewCounter;
    }

    @Column(name = "difficulty")
    public Integer getDifficulty() {
        return this.difficulty;
    }

    public void setDifficulty(Integer difficulty) {
        this.difficulty = difficulty;
    }

    @Column(name = "premium")
    public Boolean getPremium() {
        return this.premium;
    }

    public void setPremium(Boolean premium) {
        this.premium = premium;
    }

    @OneToOne(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "clientCase")
    public CaseRating getCaseRating() {
        return this.caseRating;
    }

    public void setCaseRating(CaseRating caseRating) {
        this.caseRating = caseRating;
    }

    @ManyToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY)
    @JoinTable(name = "clientCaseConsultantApplication", catalog = "SpolecznoscFinansowa", joinColumns = {
        @JoinColumn(name = "fk_clientCaseCCCA", nullable = false, updatable = false)}, inverseJoinColumns = {
        @JoinColumn(name = "fk_consultantCCCA", nullable = false, updatable = false)})
    @ForeignKey(name = "ClientCaseToConsultantApplication")
    public Set<Consultant> getConsultants() {
        return this.consultants;
    }

    public void setConsultants(Set<Consultant> consultants) {
        this.consultants = consultants;
    }

    @ManyToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY)
    @JoinTable(name = "clientCaseConsultantObserved", catalog = "SpolecznoscFinansowa", joinColumns = {
        @JoinColumn(name = "fk_clientCaseCCCO", nullable = false, updatable = false)}, inverseJoinColumns = {
        @JoinColumn(name = "fk_consultantCCCO", nullable = false, updatable = false)})
    @ForeignKey(name = "ClientCaseToConsultantObserved")
    public Set<Consultant> getConsultants_1() {
        return this.consultants_1;
    }

    public void setConsultants_1(Set<Consultant> consultants_1) {
        this.consultants_1 = consultants_1;
    }

    @Column(name = "numberOfPayments")
    public Integer getNumberOfPayments() {
        return this.numberOfPayments;
    }

    public void setNumberOfPayments(Integer numberOfPayments) {
        this.numberOfPayments = numberOfPayments;
    }

    @Column(name = "interestRateType")
    public Integer getInterestRateType() {
        return this.interestRateType;
    }

    public void setInterestRateType(Integer interestRateType) {
        this.interestRateType = interestRateType;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "receiveCreditDate", length = 19)
    public Date getReceiveCreditDate() {
        return this.receiveCreditDate;
    }

    public void setReceiveCreditDate(Date receiveCreditDate) {
        this.receiveCreditDate = receiveCreditDate;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "beginPaymentDate", length = 19)
    public Date getBeginPaymentDate() {
        return this.beginPaymentDate;
    }

    public void setBeginPaymentDate(Date beginPaymentDate) {
        this.beginPaymentDate = beginPaymentDate;
    }

    @Column(name = "interestRate", precision = 22, scale = 0)
    public Double getInterestRate() {
        return this.interestRate;
    }

    public void setInterestRate(Double interestRate) {
        this.interestRate = interestRate;
    }
    @OneToMany(cascade = CascadeType.ALL, mappedBy = "clientCase")
    public List<Installment> getInstallments() {
        return installments;
    }

    public void setInstallments(List<Installment> installments) {
        this.installments = installments;
    }
}
